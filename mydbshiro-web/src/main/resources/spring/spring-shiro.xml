<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	<!-- 定义注解的扫描包，也就是说你必须配置好扫描包之后才可以扫描该包中所有类上出现的注解信息 -->
	<context:component-scan base-package="cn.zj"/>
	<!-- 定义项目之中要使用的认证与授权处理的Realm对象，该对象一定要配置到安全管理器之中 -->
	<bean id="memberRealm" class="cn.zj.mydbshiro.realm.MemberRealm">
		<property name="credentialsMatcher">
			<bean class="cn.zj.mydbshiro.util.shiro.DefaultCredentialsMatcher"/><!--定义密码匹配器对象  -->
		</property>
	</bean>
	<!--定义shiro ehcache管理器  -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:shiro/ehcache.xml"/>
	</bean>
	<!--定义shiro sessionId生成器-->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
	<!--定义session的处理操作  -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<!--定义在session管理中定义的缓存策略,activeSessionsCacheName的默认名称就是shiro-activeSessionCache  -->
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
		<!--获得生成的SessionId数据  -->
		<property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>
	<!--配置SessionId的cookie存储策略  -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!--设置Cookie名字  -->
		<property name="name" value="J1k3n-session-id"/>
	</bean>
	<!--定义配置Session管理器,将操作策略配置进管理器中  -->
	<bean id="seesionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!--定义SessionId 的生成操作以及数据操作对象 -->
		<property name="sessionDAO" ref="sessionDAO"/>
		<!--定义SessionId的Cookie保存操作,定义cookie名称  -->
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
		<!--定义Session的全局失效时间,WEB中默认的时间将失效，如果不设置默认为30分钟 -->
		<property name="globalSessionTimeout" value="10000"/>
		<!--开启删除失效无用的Session  -->
		<property name="deleteInvalidSessions" value="true"/>
		<!--默认启用cookie进行seesionId的存储  -->
		<property name="sessionIdCookieEnabled" value="true"/>
	</bean>
	<!--定义rememberMe的cookie存储配置类  -->
	<bean id="rememberCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!--定义rememberMe的cookie中保存名称  -->
		<property name="name" value="J1k3n-rememberMe"/>
		<!--定义remeberMeCookie的有效期 ,此处设为30天 -->
		<property name="maxAge" value="2592000"/>
	</bean>
	<!--定义一个rememberMeCookie的管理器  -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!--管理cookie配置  -->
		<property name="cookie" ref="rememberCookie"/>
	</bean>
	<!-- 定义Shiro的安全管理器，所有的认证与授权处理一定要首先交给安全处理器进行管理 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="memberRealm"/>	<!-- 配置要使用的Realm对象 -->
		<property name="cacheManager" ref="cacheManager"/><!--配置是要使用的缓存对象  -->
		<property name="sessionManager" ref="seesionManager"/><!--配置要使用的session对象  -->
		<property name="rememberMeManager" ref="rememberMeCookie"/><!--配置要使用的rememberMeCookie对象  -->
	</bean>
	<!-- 配置注销登录的过滤器 -->
	<bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
		<!-- 注销之后的跳转路径 -->
		<property name="redirectUrl" value="/logout.action"/>
	</bean>
	
	<!-- 
	
	通过配置FormAuthenticationFilter来实现内置登录的操作控制
	<bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<property name="usernameParam" value="mid"/>	定义表单参数名称
		<property name="passwordParam" value="password"/>	定义表单参数名称
		<property name="rememberMeParam" value="rememberMe"/>定义免登录参数名称  
		如果要进行登录的提交一定要有一个控制器（Servlet、Filter），但是至少需要有一个提交地址
		<property name="loginUrl" value="/loginForm.action"/>
		配置登录的相关错误信息显示的属性名称，此处配置为error
		<property name="failureKeyAttribute" value="error"/>
	</bean>
	
	 -->
	<!-- 
	
	配置文件里面已经将所有的配置交由Spring负责了，所以对于过滤的处理操作一定要交给指定的类完成配置
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		在此过滤管理之中定义要使用的安全管理器
		<property name="securityManager" ref="securityManager"/>
		当认证或授权出现了错误之后应该跳转到登录页面，要由Action跳转到JSP页面
		<property name="loginUrl" value="/loginForm.action"/>
		当授权失败之后跳转的页面路径，也是通过Action跳转
		<property name="unauthorizedUrl" value="/unauth.action"/>
		当登录成功之后跳转到的指定页面
		<property name="successUrl" value="/pages/back/welcome.action"/>
		<property name="filters">	由于现在重新定义了过滤，所以要重新追加
			<map>
				当执行了authc的检测的时候，明确的找到新的过滤配置类
				<entry key="authc" value-ref="formAuthenticationFilter"/>
				当执行了注销的操作过滤时，会执行此项配置
				<entry key="logout" value-ref="logoutFilter"/>
			</map>
		</property>
		定义所有访问路径处理规则
		<property name="filterChainDefinitions">
			<value>
				/logout=logout
				/loginForm.action=authc
				/pages/back/**=authc此处如果auth认证的话，将永远需要手工配置，且rememberMe将无效 
				/pages/back/**=user
				/pages/back/dept/**=roles[dept]
			</value>
		</property>
	</bean> 
	
	 -->
	 <!--自定义过滤处理操作 -->
	 	<bean id="formAuthenticationFilter" class="cn.zj.mydbshiro.util.shiro.DefaultFormAuthenticationFilter">
		<property name="usernameParam" value="mid"/>	<!-- 定义表单参数名称 -->
		<property name="passwordParam" value="password"/>	<!-- 定义表单参数名称 -->
		<property name="rememberMeParam" value="rememberMe"/><!-- 定义免登录参数名称 -->  
		<!-- 如果要进行登录的提交一定要有一个控制器（Servlet、Filter），但是至少需要有一个提交地址 -->
		<property name="loginUrl" value="/loginForm.action"/>
		<!-- 配置登录的相关错误信息显示的属性名称，此处配置为error -->
		<property name="failureKeyAttribute" value="error"/>
		<property name="randName" value="rand"/>
		<property name="randParam" value="code"/>
	</bean>
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 在此过滤管理之中定义要使用的安全管理器 -->
		<property name="securityManager" ref="securityManager"/>
		<!-- 当认证或授权出现了错误之后应该跳转到登录页面，要由Action跳转到JSP页面 -->
		<property name="loginUrl" value="/loginForm.action"/>
		<!-- 当授权失败之后跳转的页面路径，也是通过Action跳转 -->
		<property name="unauthorizedUrl" value="/unauth.action"/>
		<!-- 当登录成功之后跳转到的指定页面 -->
		<property name="successUrl" value="/pages/back/welcome.action"/>
		<property name="filters">	<!-- 由于现在重新定义了过滤，所以要重新追加 -->
			<map>
				<!-- 当执行了authc的检测的时候，明确的找到新的过滤配置类 -->
				<entry key="authc" value-ref="formAuthenticationFilter"/>
				<!-- 当执行了注销的操作过滤时，会执行此项配置 -->
				<entry key="logout" value-ref="logoutFilter"/>
			</map>
		</property>
		<!-- 定义所有访问路径处理规则 -->	
		<property name="filterChainDefinitions">
			<value>
				/logout=logout
				/loginForm.action=authc
			<!-- 	/pages/back/**=authc此处如果auth认证的话，将永远需要手工配置，且rememberMe将无效  -->
				/pages/back/**=user
			<!-- 	/pages/back/dept/**=roles[dept] -->
			</value>
		</property>
	</bean> 
</beans>